<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on April - APL embedded in Common Lisp</title>
    <link>//jpthing.github.io/april-hugo/posts/</link>
    <description>Recent content in Posts on April - APL embedded in Common Lisp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 Jul 2023 00:00:00 +0200</lastBuildDate><atom:link href="//jpthing.github.io/april-hugo/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GLSL</title>
      <link>//jpthing.github.io/april-hugo/posts/glsl/</link>
      <pubDate>Sun, 23 Jul 2023 00:00:00 +0200</pubDate>
      
      <guid>//jpthing.github.io/april-hugo/posts/glsl/</guid>
      <description>GLSL interface GLSL at github First clone this locally. &amp;lt;root&amp;gt;/Test contains example GLSL scripts./
The files here use CRLF windows style line endings to fix include
(use-package glsl-mode) (defun jpt/cr-sanitise () &amp;#34;Make sure current buffer uses unix-utf8 encoding. If necessary remove superfluous ^M. Buffer will need to be saved for changes to be permanent.&amp;#34; (interactive) (set-buffer-file-coding-system &amp;#39;utf-8-unix) (delete-trailing-whitespace) (message &amp;#34;Please save buffer to persist encoding changes.&amp;#34;)) (defun jpt/rm-cr () &amp;#34;Remove ^M at end of line in the whole buffer.</description>
    </item>
    
    <item>
      <title>JSON Reader</title>
      <link>//jpthing.github.io/april-hugo/posts/json/</link>
      <pubDate>Sat, 15 Jul 2023 00:00:00 +0200</pubDate>
      
      <guid>//jpthing.github.io/april-hugo/posts/json/</guid>
      <description>JSON reader for Vulcan There are numerous JSON readers in Common Lisp. See JSON review. I don&amp;rsquo;t like any of them. They are over-complicated and translate into a binary lisp format that is hard to read and debug without using the inspector. A JSON file can all be read with plist&amp;rsquo;s and lists.
There are numerous options and steps involved in setting up a Vulcan pipeline. They involve setting at on of &amp;lt;something&amp;gt;Info structures and then calling the functions.</description>
    </item>
    
    <item>
      <title>APL and SPIR</title>
      <link>//jpthing.github.io/april-hugo/posts/hal/</link>
      <pubDate>Tue, 11 Jul 2023 00:00:00 +0200</pubDate>
      
      <guid>//jpthing.github.io/april-hugo/posts/hal/</guid>
      <description>Leveraging APL and SPIR-V languages to write network functions to be deployed on Vulkan compatible GPUs Research paper.
Juuso Haavisto. Leveraging APL and SPIR-V languages to write network functions to be deployed on Vulkan compatible GPUs. Networking and Internet Architecture [cs.NI]. 2020. ffhal-03155647f
paper</description>
    </item>
    
    <item>
      <title>Linear Algebra Lectures</title>
      <link>//jpthing.github.io/april-hugo/posts/la-lectures/</link>
      <pubDate>Tue, 11 Jul 2023 00:00:00 +0200</pubDate>
      
      <guid>//jpthing.github.io/april-hugo/posts/la-lectures/</guid>
      <description>Gilbert Strang lectures on Linear Algebra at MIT These video lectures of Professor Gilbert Strang teaching 18.06 were recorded live in the Fall of 1999. Support for the video production was provided by the Lord Foundation of Massachusetts under a grant to the MIT Center for Advanced Educational Services.
lectures</description>
    </item>
    
    <item>
      <title>ox-hugo</title>
      <link>//jpthing.github.io/april-hugo/posts/ex-hugo/</link>
      <pubDate>Tue, 11 Jul 2023 00:00:00 +0200</pubDate>
      
      <guid>//jpthing.github.io/april-hugo/posts/ex-hugo/</guid>
      <description>Write entries in org mode with ox-hugo I updated my Emacs config to accept ox-hugo. This is a Org sub-mode that allows org documents to be exported as markup for hugo. A new sub-directory contents-org was also added to hold the org versions of the files. It is set up so that the files are automatically converted to markup when saved.</description>
    </item>
    
    <item>
      <title>U-net CNN in APL</title>
      <link>//jpthing.github.io/april-hugo/posts/u-net/</link>
      <pubDate>Tue, 11 Jul 2023 00:00:00 +0200</pubDate>
      
      <guid>//jpthing.github.io/april-hugo/posts/u-net/</guid>
      <description>Exploring zero-framework, zero-library machine learning Research paper from Dyalog on machine learning in APL. paper</description>
    </item>
    
    <item>
      <title>April GPU</title>
      <link>//jpthing.github.io/april-hugo/posts/april-gpu/</link>
      <pubDate>Sun, 09 Jul 2023 13:09:24 +0200</pubDate>
      
      <guid>//jpthing.github.io/april-hugo/posts/april-gpu/</guid>
      <description>Getting April to use a GPU Current state of affairs We live in days where there are constant wonders/horrors in the area of Machine Learning. For a long time this been the domain of a handful of tools.
python numpy scipy jupyter ipython tensorflow torch pandas matplotlib rapids All of the above, but only for CUDA GPU&amp;rsquo;s and optimized to keep the computations in GPU RAM. Where April fits in April is just a APL compiler.</description>
    </item>
    
    <item>
      <title>April - APL as a sublanguage of Common LIsp</title>
      <link>//jpthing.github.io/april-hugo/posts/april/</link>
      <pubDate>Sun, 09 Jul 2023 11:43:38 +0200</pubDate>
      
      <guid>//jpthing.github.io/april-hugo/posts/april/</guid>
      <description>April Array Programming Re-Imagined in Lisp Ken Iverson&amp;rsquo;s masterpiece reflected in the medium of Lisp.
April compiles a subset of the APL programming language into Common Lisp. Leveraging Lisp&amp;rsquo;s powerful macros and numeric processing faculties, it brings APL&amp;rsquo;s expressive potential to bear for Lisp developers. Replace hundreds of lines of number-crunching code with a single line of APL.
Why April? APL veritably hums with algorithmic power. As a handful of characters run past the lexer, vast fields of data grow, morph and distil to reveal their secrets.</description>
    </item>
    
    <item>
      <title>Journal</title>
      <link>//jpthing.github.io/april-hugo/posts/journal/</link>
      <pubDate>Thu, 23 Feb 2023 00:00:00 +0100</pubDate>
      
      <guid>//jpthing.github.io/april-hugo/posts/journal/</guid>
      <description>2023 2023-02 februar 2023-02-23 torsdag 11:17 - april GPU journal
Research ways of letting APL run on a GPU. In paricular a april extension. (April is a APL library for Common Lisp wich extestions for Dylog APL but relies on CL for IO.)
APL to GPU slides for discussion on dylogs attempts. Rapids is a library for doing all calculation on the GPU. It contains cudf a library which is a drop in replacement for pandas but which performs the operation on the GPU.</description>
    </item>
    
    <item>
      <title>APL DNN tutorial</title>
      <link>//jpthing.github.io/april-hugo/posts/apl-dnn-tut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//jpthing.github.io/april-hugo/posts/apl-dnn-tut/</guid>
      <description>APL neural net tutorial The “Learn APL with Neural Networks” YouTube series aims at teaching you APL while building a basic machine learning framework from the ground up.
By the time you are done, you will have created a machine learning framework and used it to train a neural network that recognises handwritten digits. You will also be able to tackle other problems you pick because of the flexibility of what you created!</description>
    </item>
    
  </channel>
</rss>
